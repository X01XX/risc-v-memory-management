# Implement a memory store.
#
# The amount of free memory can be set at the mem: label.
#
# Memory can be allocated until the limit is reached.
#
# Memory allocated is initialized to zero.
#
# Memory cannot be deallocated.

# Word sizes. Change if a word is not 32 bits, 4 bytes.
	.equ w1, 4

	# Shift number bits to convert between words and bytes.
	# Change if a word is not 32 bits, 4 bytes.
	.equ sbts, 2

# GLobal labels:
	.global mem_init
	.global mem_alloc
	.global mem_left

# Initialize the memory store.
# Call from main before using mem_alloc.
# In:  Nothing.
# Out: Nothing.
mem_init:
    la t0, mem		# Load ptr to memory block.
    la t1, mem_ptr	# Load ptr to word storing the ptr to the next free word.
    sw t0, 0(t1)	# Store ptr to memory block.
    ret

# Allocate a block of memory.
# In:  a0 = number words needed.
# Out: a1 = Address of memory block, or
#      Invalid request error.
#      Out of memory error.
mem_alloc:
    blez a0, invalid_request	# Check for zero, or negative, memory request.

    la t0, mem_ptr
    lw a1, 0(t0)	# Get free block pointer, for return.

    slli t1, a0, sbts	# Multiply word number by number bytes per word.
    add t1, a1, t1	# Increment memory pointer to new free block start.

    la t2, end		# Check if new free block pointer is beyond th end of memory.
    blt t2, t1, out_of_memory

    sw t1, 0(t0)	# Store new free block pointer.

    ret			# Return a1
   
# Display invalid memory request, then halt.
invalid_request:
    la t0, invalid_str
    sout t0
    halt

invalid_str:	 .asciz "mem_aloc: Invalid memory request"

# Display out of memory error, then halt.
out_of_memory:
    la t0, out_str
    sout t0
    halt

out_str:	 .asciz "Out of memory"

# Print the amount of memory that is left.
# In:  Nothing.
# Out: A message is displayed.
mem_left:
    la t0, cr
    sout t0

    # Get pointer to next free block.
    la t0, mem_ptr
    lw t1, 0(t0)

    la t2, end	# Get end of memory

    sub t3, t2, t1	# Get difference, in bytes.
    srli t3, t3, sbts	# Convert to words.
    dout t3		# Output number of words left.

    la t3, mem_left_str1
    sout t3

    sub t3, t2, t0	# Get difference, in bytes.
    srli t3, t3, sbts	# Convert to words.
    addi t3, t3, -1	# Subtract one for mem pointer word.
    dout t3

    la t3, mem_left_str2
    sout t3

    ret
mem_left_str1: .asciz	" Words of "
mem_left_str2: .asciz	" allocate-only memory left."

cr: .asciz "\n"

# Pointer to the next free memory block.
.align w1
mem_ptr:	 .word 0

# Start, and end of free memory allocation.
mem:		.zero 4000 	# Number bytes, but .zero fills to a whole number of words. Should be divisible by 8.
end:

