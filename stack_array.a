# Implement a stack-array
#
# Run stack_array_new to allocate, and initialize, memory for a new stack_array.
#
# Run stack_array_alloc, to get an address to an available array item.
#
# Run stack_array_dealloc, to return an address that is no longer used.
#
#    There are two sections of code in stack_array_dealloc that can be commented out,
#    for greater speed, but lower detection of errors.
#
# Its fast, but does not check for duplicate, or invalid addresses, being deallocated.

	# Word sizes. Change if a word is not 32 bits, 4 bytes.
	.equ w1, 4
	.equ w2, 8
	.equ w3, 12
	.equ w4, 16
	.equ w5, 20
	.equ w6, 24
	.equ w7, 28
	.equ w8, 32
	.equ w9, 36
	.equ w1n, -4
	.equ w2n, -8
	.equ w3n, -12
	.equ w5n, -24
	.equ w9n, -36

	# Shift number bits to convert between words and bytes.
	# Change if a word is not 32 bits, 4 bytes.
	.equ sbts, 2

#struct sa (stack-array)
	.equ	sa_stack_ptr, 0		# Ptr to stack struct.
	.equ 	sa_array_ptr, w1	# Ptr to array.
	.equ	sa_num_items, w2	# Max number items.
	.equ	sa_item_words, w3	# Number words per item.
	.equ	sa_words, 4		# Number words in this struct.

	.global stack_array_new
	.global stack_array_dealloc
	.global stack_array_alloc
	.global stack_array_print

	.extern mem_alloc		# Get memory from allocate-only memory store.

	.extern stack_new
	.extern stack_push
	.extern stack_pop
	.extern stack_print
	.extern stack_check_addr

# Generate a stack-array
# In:  a0 - Number of items.
#      a1 - Number of words in each item.
#      a2 - Pointer to string description.
# Out: a1 - Stack pointer.
#      The stack is loaded with the ptr to each array item.
#      The array ptr is not needed by the caller, it is only used in this function.
stack_array_new:
    blez a0, invalid_num_items # Check for zero, or negative, number of items.
    blez a1, invalid_num_words # Check for zero, or negative, number of words.

    addi sp, sp, w9n	# Adjust stack ptr.
    sw ra, 0(sp)	# Save return addr.
    sw a0, w1(sp)	# Save number items.
    sw a1, w2(sp)	# Save number words per item.
    sw a2, w3(sp)	# Save ptr to description.
    sw s1, w5(sp)	# Save s1.
    sw s2, w6(sp)	# Save s2.
    sw s3, w7(sp)	# Save s3.
    # rsv w8(sp)	# SA struct ptr to return.

    # Allocate sa struct.
    li	a0, sa_words	# Load number words in SA struct.
    jal mem_alloc	# Get ptr to array into a1.
    sw a1, w8(sp)	# Save struct ptr.

    # Add number items to struct.
    lw s1, w8(sp)	# Load struct ptr.
    lw t0, w1(sp)	# Load number items.
    sw t0, sa_num_items(s1)

    # Add words per item, to struct.
    lw s1, w8(sp)	# Load struct ptr.
    lw t0, w2(sp)	# Load words per item.
    sw t0, sa_item_words(s1)

    # Allocate new stack.
    lw	a0, w1(sp)	# Load number of items.
    lw	a1, w3(sp)	# Load ptr to description.
    jal stack_new	# Get ptr to stack in a1.

    # Save stack struct ptr to SA struct.
    lw	s1, w8(sp)	# Get ptr to SA struct.
    sw  a1, sa_stack_ptr(s1)
	
    # Allocate array.

    # Calc array words.  Use additions to stay withn RV32I, RV64I, .. ?
    lw	t0, w1(sp)	# Load number of items.
    lw	t1, w2(sp)	# Load number of words in each item.
#   mul a0, t0, t1	# Get number of words of array memory needed.
    li s1, 0		# Init counter.
top_mult:
    beqz t0, end_mult	# Check for end.
    add s1, s1, t1	# Add the number of words in one item.
    addi t0, t0, -1	# Decrement counter.
    jal top_mult	# Jump to add next item number words.
end_mult:
    mv a0, s1		# Load number words to pass.
    jal mem_alloc	# a0 contains number words needed.  Get memory allocation for array into a1.

    # Save array ptr to struct.
    lw	t0, w8(sp)	# Get ptr to struct.
    sw  a1, sa_array_ptr(t0)
	
    # Push the ptr to each array item onto the stack.

    # Load ptrs to stack and array.
    lw	t0, w8(sp)		# Get ptr to sa struct.
    lw	s1, sa_stack_ptr(t0)	# Load ptr to stack.

    lw	s2, sa_array_ptr(t0)	# Load ptr to array.

    # Calc number bytes per item.
    lw	 s3, w2(sp)		# Load number of words in each item.
    slli s3, s3, sbts           # Multiply number words by word size to get size in bytes.
    lw s4, w1(sp)		# Load number items.

loop:
    # Push next item ptr to stack.  Need a0, ptr to stack, a1 value to push.
    mv a0, s1		# Load stack ptr for call.
    mv a1, s2		# Load array item ptr for call.
    jal stack_push
    
    # Check if done.
    addi s4, s4, -1	# Decrement number items left.
    beqz s4, ret	# Return if zero, no items left.
    
    add s2, s2, s3	# Point to next array item.

    j loop

ret:
    lw s1, w5(sp)	# Restore s1.
    lw s2, w6(sp)	# Restore s2.
    lw s3, w7(sp)	# Restore s3.
    lw a1, w8(sp)	# Load SA struct ptr to return.
    lw ra, 0(sp)	# Restore return register.
    addi sp, sp, w9	# Adjust stack ptr.

    ret			# Return a1


# Print a stack_array, ptr in a0.
stack_array_print:
    addi sp, sp, w2n	# Adjust stack ptr.
    sw ra, 0(sp)	# Save return addr.
    sw s1, w1(sp)	# Save s1.

    mv s1, a0		# sa struct adr to s1.

    # Print stack.
    lw a0, sa_stack_ptr(s1)
    jal stack_print
    
    # Print stack_array address.
    la t0, sa_adr_str
    sout t0
    hout a0

    # Print stack address.
    la t0, stk_adr_str
    sout t0
    lw t1, sa_stack_ptr(s1)
    hout t1

    # Print array address.
    la t0, ary_adr_str
    sout t0
    lw t1, sa_array_ptr(s1)
    hout t1

    la t0, cr
    sout t0

    lw ra, 0(sp)	# Restore return register.
    lw s1, w1(sp)	# Restore s1.
    addi sp, sp, w2	# Adjust stack ptr.

    ret

in_sa_print: .asciz "\nIn sa print\n"
stk_adr_str: .asciz "\nStack addr: "
ary_adr_str: .asciz "\nArray addr: "
sa_adr_str: .asciz "\nStack_Array addr: "
cr: .asciz "\n"

# Display invalid request, then halt.
invalid_num_items:
    la t0, invalid_num_items_str
    sout t0
    halt

invalid_num_items_str:     .asciz "stack_array_new: Invalid number of items"

# Display invalid request, then halt.
invalid_num_words:
    la t0, invalid_num_words_str
    sout t0
    halt

invalid_num_words_str:     .asciz "stack_array_new: Invalid number of words"

# Get an address of an array item from the stack.
# stack_array ptr in a0.
# Return item pointer in a1.
stack_array_alloc:
    addi sp, sp, w1n	# Adjust stack ptr.
    sw ra, 0(sp)	# Save return addr.

    # Load stack_address.
    lw a0, sa_stack_ptr(a0)

    # Get item from stack.  Stack may be empty, causing a halt.
    jal stack_pop

    lw ra, 0(sp)	# Restore return register.
    addi sp, sp, w1	# Adjust stack ptr.

    ret

# Return an address of an array item to the stack.
# stack_array ptr in a0, addr to deallocate in a1.
# Item will be zeroed out.
stack_array_dealloc:
    addi sp, sp, w3n	# Adjust stack ptr.
    sw ra, 0(sp)	# Save return addr.
    sw s1, w1(sp)	# Save s1.
    sw s2, w2(sp)	# Save s2.

    mv s1, a0		# sa struct adr to s1.
    mv s2, a1		# sa item adr to s2.

    # Check address is not already in the stack.
    # This section can be commented out for greater speed.
    lw a0, sa_stack_ptr(s1)
    mv a1, s2
    jal stack_check_addr

    # Zero out item memory.
    # This section can be commented out for greater speed.
    lw t0, sa_item_words(s1)	# Load words in item.
    mv t2, s2			# Item ptr to t2.
sad_top_loop:
    beqz t0, sad_end_loop

    sw x0, 0(t2)		# Zero out a word

    addi t0, t0, -1		# Decrement the item word counter.
    addi t2, t2, w1		# Increment the item word pointer.

    j sad_top_loop
sad_end_loop:

    # Return item to stack.
    lw a0, sa_stack_ptr(s1)
    mv a1, s2
    jal stack_push

    lw ra, 0(sp)	# Restore return register.
    lw s1, w1(sp)	# Restore s1.
    lw s2, w2(sp)	# Restore s1.
    addi sp, sp, w3	# Adjust stack ptr.

    ret

# Get an address of an array item from the stack.

